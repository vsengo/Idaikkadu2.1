# Generated by Django 2.2.1 on 2019-05-10 07:43

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=256)),
                ('author', models.CharField(help_text='Author of the News or Article', max_length=128)),
                ('email', models.EmailField(max_length=254)),
                ('menu', models.CharField(choices=[('A', 'Australia'), ('C', 'Canada'), ('W', 'Swiss'), ('U', 'UK'), ('E', 'Europe'), ('U', 'Middle East'), ('S', 'School'), ('O', 'Associations'), ('T', 'Temples'), ('l', 'Libraries'), ('B', 'Articles'), ('D', 'Obituaries'), ('X', 'Other')], max_length=1)),
                ('approved', models.CharField(choices=[('Y', 'Yes'), ('N', 'No')], max_length=1)),
                ('countLike', models.PositiveSmallIntegerField()),
                ('countDisLike', models.PositiveSmallIntegerField()),
                ('imageDir', models.FileField(upload_to='Image/%Y')),
                ('link', models.URLField(blank=True, help_text='Optional : any link to share')),
                ('release_date', models.DateField()),
                ('updated_by', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('updated_by', models.CharField(max_length=128)),
                ('create_date', models.DateField(auto_now=True)),
                ('approved', models.CharField(choices=[('Y', 'Yes'), ('N', 'No')], max_length=1)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Content')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=20, verbose_name='First Name of User')),
                ('last_name', models.CharField(blank=True, max_length=20, verbose_name='Last Name of User')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
